import json
from pprint import pprint

import qrcode
from io import BytesIO
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InputFile, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from clients import find_client_by_user_id, get_user_info_by_id, send_mailing, update_clients_status_pos

router = Router()


class Mailing(StatesGroup):
    text = State()
    images = State()


def get_keyboard_buttons(user_id: int = None):
    buttons = [
        [
            KeyboardButton(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—á–µ—Ç—É"),
            KeyboardButton(text="üìá –ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞"),
        ],
        [
            KeyboardButton(text="üí≥ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"),
            KeyboardButton(text="üìù –ó–∞–∫–∞–∑–∞—Ç—å –ª–∏–Ω–∑—ã"),
        ],
    ]

    if user_id == 795677145:
        buttons.append([
            KeyboardButton(text="‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"),
            KeyboardButton(text="üß† –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"),
        ])

    keyboard = types.ReplyKeyboardMarkup(keyboard=buttons)
    return keyboard


@router.message(F.text == "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—á–µ—Ç—É")
async def send_product(message: types.Message) -> None:
    await message.answer("–û—Ç—á–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. ‚è≥")
    userid = find_client_by_user_id(message.from_user.id)
    user = get_user_info_by_id(userid['id'])
    pprint(user)
    text = ''
    if user.get('debt', None):
        money = int(str(int(float(user["debt"])))[:-2])
        if userid['status'] in [0, 1]:
            text = f'–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ {35000 - money} —Å–æ–º –¥–æ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è'
        elif userid['status'] == 2:
            text = f'–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ {75000 - money} —Å–æ–º –¥–æ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è'
        elif userid['status'] == 2:
            text = f'–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ {135000 - money} —Å–æ–º –¥–æ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è'
    else:
        text = f'–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ {35000 - 0} —Å–æ–º –¥–æ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è'
    await message.answer(f'üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {0 if user.get("debt", None) else user.get("debt", None)}\n{text}')


@router.message(F.text == "üìá –ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞")
async def send_product(message: types.Message) -> None:
    await message.answer("–ë–∞–ª–∞–Ω—Å –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. ‚è≥")
    user = find_client_by_user_id(message.from_user.id)
    user = get_user_info_by_id(user['id'])
    await message.answer(f'üßæ –ë–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤: {user.get("debt")}')


@router.message(F.text == "üí≥ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞")
async def send_product(message: types.Message) -> None:
    await message.answer("–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. ‚è≥")
    user = find_client_by_user_id(message.from_user.id)
    user = get_user_info_by_id(user['id'])
    generate_qr_code(user["discount_card"])

    await message.answer_photo(
        photo=types.FSInputFile(path=f'pos/qr_codes/{user["discount_card"]}.png'),
        # photo=f'qr_codes/{user["_id"]}.png',
        caption=(
            "üí≥ –≠—Ç–æ—Ç QR-–∫–æ–¥ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥—ä—è–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n"
        )
    )


@router.message(F.text == "üìù –ó–∞–∫–∞–∑–∞—Ç—å –ª–∏–Ω–∑—ã")
async def send_product(message: types.Message) -> None:
    url = 'https://linzy.kg/'
    url2 = 'https://api.whatsapp.com/send?phone=996705501056&text=%D0%9F%D0%B8%D1%88%D1%83%20%D1%87%D0%B5%D1%80%D0%B5%D0%B7%20%D0%B1%D0%BE%D1%82%D0%B0%20'
    buttons = [
        [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –ª–∏–Ω–∑—ã", url=url)],
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –≤–æ—Ç—Å–∞–ø", url=url2)],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–ó–∞–∫–∞–∑–∞—Ç—å –ª–∏–Ω–∑—ã",  reply_markup=keyboard)
    # user = find_client_by_user_id(str(message.from_user.id))
    # await message.answer(f'üí∞ –í—Å–µ–≥–æ: {user["bonus_spent"]}')


def generate_qr_code(user_id):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    # Data to be encoded

    # Encoding data using make() function
    img = qrcode.make(user_id)

    # Saving as an image file
    img.save(f'pos/qr_codes/{user_id}.png')
    return img


@router.message(F.text == "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def send_product(message: types.Message, state: FSMContext) -> None:
    await message.answer(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.update_data(canals=message.text)
    await state.set_state(Mailing.text)





@router.message(Mailing.text)
async def process_contact(message: types.Message, state: FSMContext):
    if message.text is not None:
        await message.answer(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        )
        await state.update_data(text=message.text)
        await state.set_state(Mailing.images)
    else:
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        )



@router.message(Mailing.images)
async def process_images(message: types.Message, state: FSMContext, bot):
    data = await state.get_data()
    images = data.get("images", [])

    if message.photo:  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images.append(file_id)
        await state.update_data(images=images)
        await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—Å–µ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

    elif message.text and message.text.lower() == "–≤—Å–µ":
        await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... ‚è≥‚è≥")
        data = await state.get_data()
        text = data.get("text")
        images = data.get("images")
        canal = data.get("canals")
        await send_mailing(canal, text, images)
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ ‚úÖ‚úÖ", reply_markup=get_keyboard_buttons(message.from_user.id))
        await state.clear()


@router.message(F.text == "üõ† –û–±—Ä–∞–±–æ—Ç–∞—Ç—å")
async def send_product(message: types.Message) -> None:
    await message.answer("–ö–ª–∏–µ–Ω—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è...")
    await update_clients_status_pos()
    await message.answer(f'–ì–æ—Ç–æ–≤–æ ‚úÖ‚úÖ')


# @router.message(F.text == "üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤")
# async def send_excel_file(message: types.Message):
#     """
#     –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram.
#     """
#     await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–π–ª...")
#
#     file_path = await generate_excel_from_db()
#
#     if file_path:
#         await message.answer_document(FSInputFile(file_path), caption="–í–æ—Ç –≤–∞—à Excel-—Ñ–∞–π–ª —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ üìÇ")
#     else:
#         await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")